# Выражение генератор это почти тоже самое что и генератор списков, отличия лишь в скобках
#
# Выражение генератор это – итератор обьекты которого можно обойти только один раз.
#
# Итератор это обьект который поддерживает функцию next()
#
# a = (i for i in range(1, 6))
#
# print(next(a)) – выведется 1, данное выражение мы можем написать только 5 раз после чего уже не получится так как элементы генератора можно обойти только один раз.
#
# Можно генератор обойти циклом for:
#
# for i in a:
#
#          print(i) -  Второй раз обойти уже не получится.
#
# Можно найти сумму элементов генератора: print(sum(a))
#
# Почему нельзя обойти второй раз? Потому-что элементы генератора попросту не хранятся в памяти.
#
# Где это может пригодиться? Например если нужно сделать итератор с очень большой цифрой например 100000000
#
# Такое большое число запихнуть в список через range() – не получится ибо выйдет ошибка memoryError
#
# Но решение проблемы есть! – Генератор.
#
# a = (i for i in range(1000000000)) – и никаких ошибок.
#
# a = (i for i in range(10)) – его можно преобразовать в список:
#
# print(list(a)) – [0,1,2,3,4,5,6,7,8,9] – список из генератора.
#
# a = [(i for i in range(10))] – из этого список не выйдет.



# Создайте генератор
from_10_to_20 = (i for i in range(10,21))

# Распечатайте три первых значения
print(next(from_10_to_20))
print(next(from_10_to_20))
print(next(from_10_to_20))

# выведите все оставшиеся
for value in from_10_to_20:
    print(value)